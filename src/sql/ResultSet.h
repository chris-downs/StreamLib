// ResultSet.h: interface for the ResultSet class.
//
//////////////////////////////////////////////////////////////////////

#if !defined(AFX_RESULTSET_H__6BD009A7_DA29_42A1_866E_3FCC47AC206D__INCLUDED_)
#define AFX_RESULTSET_H__6BD009A7_DA29_42A1_866E_3FCC47AC206D__INCLUDED_

#if _MSC_VER > 1000
#pragma once
#endif // _MSC_VER > 1000

/// namespace stream
namespace stream
{
/// namespace sql
namespace sql
{

/**
	A table of data representing a database result set, which is usually generated by executing a 
	statement that queries the database. 

   	<h3>Example code</h3>
<code>
	try<br>
	{<br>
		...<br>
		&nbsp;&nbsp;auto_ptr&lt;ResultSet&gt; result = statement->executeQuery();<br>
		<br>
		&nbsp;&nbsp;result->moveFirst();<br>
<br>
		&nbsp;&nbsp;while(!result->eof())<br>
		&nbsp;&nbsp;{<br>
			&nbsp;&nbsp;&nbsp;&nbsp;cout << result->getString("server") << endl;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;cout << result->getString("port") << endl;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;cout << result->getString("user") << endl;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;cout << result->getString("password") << endl;<br>
			&nbsp;&nbsp;&nbsp;&nbsp;cout << result->getString("check2") << endl << endl;<br>
<br>
			&nbsp;&nbsp;&nbsp;&nbsp;result->moveNext();<br>
		&nbsp;&nbsp;}<br>
<br>
		&nbsp;&nbsp;result->close();<br>
<br>
	}catch(exceptions::SQLException* e)<br>
	{<br>
		&nbsp;&nbsp;cout << e->what() << endl;<br>
	}<br>
</code>

*/
class ResultSet  
{
public:
	ResultSet();
	virtual ~ResultSet();


	/**
		Releases this ResultSet object's database and resources.
	*/
	virtual void close() = 0;

	/**
		@return The long value at the given column name.
	*/
	virtual long getLong(const std::string& column) = 0;

	/**
		@return The string value at the given column name.
	*/
	virtual std::string getString(const std::string& column) = 0;
	
	/**
		@return The Blob value at the given column name.
	*/
	virtual io::Blob<char> getBlob(const std::string& column) = 0;

	/**
		@return The column name.
	*/
	virtual std::string getColumnName(const long& idColumn) = 0;
	/**
		Move to the first row of this ResultSet.
	*/
	virtual void moveFirst() = 0;

	/**
		Move to the next row of this ResultSet.
	*/
	virtual void moveNext() = 0;

	/**
		Move to the last row of this ResultSet.
	*/
	virtual void moveLast() = 0;

	/**
		@return true if the actual row is the last.
	*/
	virtual bool eof() = 0;

	/**
	@return The number of columns
	*/
	virtual ulong getColumnCount() = 0;

	/**
		@return The string value at the given column index.
	*/
	virtual std::string getString(const long columnIndex) = 0;

	/**
		@return true if the given column is NULL
	*/
	virtual bool isNull(const std::string& column) = 0;

	/**
		@return true if the given column is NULL
	*/
	virtual bool isNull(const long columnIndex) = 0;

};

/**
	ResultSet automatic pointer.
*/
typedef std::auto_ptr<ResultSet> ResultSetPtr;

} // namespace sql

} // namespace stream

#endif // !defined(AFX_RESULTSET_H__6BD009A7_DA29_42A1_866E_3FCC47AC206D__INCLUDED_)
